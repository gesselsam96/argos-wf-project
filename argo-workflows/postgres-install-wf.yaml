apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: helm-deploy-
spec:
  serviceAccountName: argo
  entrypoint: helm-deploy
  volumes:
    - name: workspace
      emptyDir: {}  # An empty directory volume that will persist across steps

  templates:
  - name: helm-deploy
    steps:
    - - name: check-release
        template: check-release

      - name: inspect-directory
        template: inspect-directory

      - name: install-or-upgrade
        template: install-or-upgrade

  - name: check-release
    script:
      image: alpine:latest
      command: ["/bin/sh"]
      source: |
        apk add --no-cache curl bash git
        curl -L https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -o helm.tar.gz
        tar -xvf helm.tar.gz
        mv linux-amd64/helm /usr/local/bin/helm

        helm status postgres --namespace app || echo "not installed" > /tmp/not-installed

  - name: inspect-directory
    script:
      image: alpine:latest
      command: ["/bin/sh"]
      volumeMounts:
        - name: workspace
          mountPath: /workspace  # Mount the shared volume here
      source: |
        apk add --no-cache curl bash git
        # Clone the GitHub repository into the shared volume
        git clone https://github.com/gesselsam96/postgress-project.git /workspace

        # List contents to confirm the directory structure
        echo "Inspecting /workspace contents:"
        ls -R /workspace

  - name: install-or-upgrade
    script:
      image: alpine:latest
      command: ["/bin/sh"]
      volumeMounts:
        - name: workspace
          mountPath: /workspace  # Mount the shared volume here
      source: |
        apk add --no-cache curl bash git
        # Clone the GitHub repository into the shared volume
        git clone https://github.com/gesselsam96/postgress-project.git /workspace
        
        curl -L https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -o helm.tar.gz
        tar -xvf helm.tar.gz
        mv linux-amd64/helm /usr/local/bin/helm
        
        # List contents to confirm the directory structure
        echo "Inspecting /workspace contents:"
        ls -R /workspace
        
        # Check if the PostgreSQL release is already installed; install or upgrade accordingly
        if [ -f /workspace/postgresql/Chart.yaml ]; then
          echo "Installing PostgreSQL from GitHub repository..."
          helm install postgres /workspace/postgresql --namespace app
        else
          echo "Upgrading PostgreSQL from GitHub repository..."
          helm upgrade postgres /workspace/postgresql --namespace app
        fi
